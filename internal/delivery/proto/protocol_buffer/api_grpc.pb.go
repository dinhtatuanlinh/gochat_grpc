// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: internal/delivery/proto/api.proto

package protocol_buffer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServicesClient is the client API for Services service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesClient interface {
	Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*RegisterResponse, error)
	ShowName(ctx context.Context, in *ShowNameRequest, opts ...grpc.CallOption) (*ShowNameResponse, error)
	Test(ctx context.Context, in *Request, opts ...grpc.CallOption) (*TestResponse, error)
	StreamServer(ctx context.Context, in *StreamServerRequest, opts ...grpc.CallOption) (Services_StreamServerClient, error)
	SendMessageToChannel(ctx context.Context, opts ...grpc.CallOption) (Services_SendMessageToChannelClient, error)
}

type servicesClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesClient(cc grpc.ClientConnInterface) ServicesClient {
	return &servicesClient{cc}
}

func (c *servicesClient) Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/go_chat.go_chat.Services/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) ShowName(ctx context.Context, in *ShowNameRequest, opts ...grpc.CallOption) (*ShowNameResponse, error) {
	out := new(ShowNameResponse)
	err := c.cc.Invoke(ctx, "/go_chat.go_chat.Services/ShowName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) Test(ctx context.Context, in *Request, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/go_chat.go_chat.Services/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) StreamServer(ctx context.Context, in *StreamServerRequest, opts ...grpc.CallOption) (Services_StreamServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Services_ServiceDesc.Streams[0], "/go_chat.go_chat.Services/StreamServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesStreamServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Services_StreamServerClient interface {
	Recv() (*StreamServerResponse, error)
	grpc.ClientStream
}

type servicesStreamServerClient struct {
	grpc.ClientStream
}

func (x *servicesStreamServerClient) Recv() (*StreamServerResponse, error) {
	m := new(StreamServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *servicesClient) SendMessageToChannel(ctx context.Context, opts ...grpc.CallOption) (Services_SendMessageToChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &Services_ServiceDesc.Streams[1], "/go_chat.go_chat.Services/SendMessageToChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesSendMessageToChannelClient{stream}
	return x, nil
}

type Services_SendMessageToChannelClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type servicesSendMessageToChannelClient struct {
	grpc.ClientStream
}

func (x *servicesSendMessageToChannelClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicesSendMessageToChannelClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServicesServer is the server API for Services service.
// All implementations must embed UnimplementedServicesServer
// for forward compatibility
type ServicesServer interface {
	Register(context.Context, *User) (*RegisterResponse, error)
	ShowName(context.Context, *ShowNameRequest) (*ShowNameResponse, error)
	Test(context.Context, *Request) (*TestResponse, error)
	StreamServer(*StreamServerRequest, Services_StreamServerServer) error
	SendMessageToChannel(Services_SendMessageToChannelServer) error
	mustEmbedUnimplementedServicesServer()
}

// UnimplementedServicesServer must be embedded to have forward compatible implementations.
type UnimplementedServicesServer struct {
}

func (UnimplementedServicesServer) Register(context.Context, *User) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedServicesServer) ShowName(context.Context, *ShowNameRequest) (*ShowNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowName not implemented")
}
func (UnimplementedServicesServer) Test(context.Context, *Request) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedServicesServer) StreamServer(*StreamServerRequest, Services_StreamServerServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamServer not implemented")
}
func (UnimplementedServicesServer) SendMessageToChannel(Services_SendMessageToChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessageToChannel not implemented")
}
func (UnimplementedServicesServer) mustEmbedUnimplementedServicesServer() {}

// UnsafeServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesServer will
// result in compilation errors.
type UnsafeServicesServer interface {
	mustEmbedUnimplementedServicesServer()
}

func RegisterServicesServer(s grpc.ServiceRegistrar, srv ServicesServer) {
	s.RegisterService(&Services_ServiceDesc, srv)
}

func _Services_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_chat.go_chat.Services/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).Register(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_ShowName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).ShowName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_chat.go_chat.Services/ShowName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).ShowName(ctx, req.(*ShowNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_chat.go_chat.Services/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).Test(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_StreamServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamServerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServicesServer).StreamServer(m, &servicesStreamServerServer{stream})
}

type Services_StreamServerServer interface {
	Send(*StreamServerResponse) error
	grpc.ServerStream
}

type servicesStreamServerServer struct {
	grpc.ServerStream
}

func (x *servicesStreamServerServer) Send(m *StreamServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Services_SendMessageToChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServicesServer).SendMessageToChannel(&servicesSendMessageToChannelServer{stream})
}

type Services_SendMessageToChannelServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type servicesSendMessageToChannelServer struct {
	grpc.ServerStream
}

func (x *servicesSendMessageToChannelServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicesSendMessageToChannelServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Services_ServiceDesc is the grpc.ServiceDesc for Services service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Services_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_chat.go_chat.Services",
	HandlerType: (*ServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Services_Register_Handler,
		},
		{
			MethodName: "ShowName",
			Handler:    _Services_ShowName_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _Services_Test_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamServer",
			Handler:       _Services_StreamServer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendMessageToChannel",
			Handler:       _Services_SendMessageToChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/delivery/proto/api.proto",
}
